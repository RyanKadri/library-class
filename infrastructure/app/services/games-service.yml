AWSTemplateFormatVersion: 2010-09-09
Description: >
  Creates a Fargate service
Parameters: 
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  LogGroup:
    Type: String
  Cluster:
    Type: String
  Listener:
    Type: String
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  ImageVersion:
    Type: String
  Repository:
    Type: String
Resources: 
  GamesTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Memory: "512"
      Cpu: "256"
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole #Temp. Fix this later
      TaskRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole #Temp. Fix this later
      ContainerDefinitions:
        - Image: !Sub ${Repository}/games:${ImageVersion}
          Name: games-container
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: board-games
  GamesService:
    Type: "AWS::ECS::Service"
    DependsOn: [ "ServiceListener" ]
    Properties: 
      ServiceName: "games-service"
      Cluster: !Ref "Cluster"
      TaskDefinition: !Ref "GamesTaskDef"
      LaunchType: "FARGATE"
      DesiredCount: 2
      # Role: !Ref LoadBalancerRole
      LoadBalancers:
        - ContainerName: "games-container"
          ContainerPort: 8080
          TargetGroupArn: !Ref "BackendTargetGroup"
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref SecurityGroup
  BackendTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref "VPC"
      TargetType: ip
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/api"
      HealthCheckPort: "8080"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ServiceListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 2
      Conditions: 
        - Field: path-pattern
          Values: 
            - "/api"
            - "/api/*"
      Actions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: forward
Outputs:
  GameService:
    Value: !GetAtt GamesService.Name